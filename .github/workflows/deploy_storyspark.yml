name: Build/Push/Deploy image for StorySpark

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (optional)'
        required: false
        default: ''

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

env:
  #ACR_NAME: storysparkacr
  #ACR_LOGIN_SERVER: storysparkacr.azurecr.io
  KEEP: 2
  TF_GOOGLE_DIR: ./Portfolio/case_studies/StorySpark/src/infra/gcp
  PROJECT_ID: storyspark-555555
  GCS_BUCKET: storyspark-555555-terraform-state
  TF_PLAN_FILE: storyspark.tfplan

  # --- GitHub Variables (used via 'vars.') ---
  GCP_PROJECT_ID: ${{ vars.STORYSPARK_GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.STORYSPARK_GCP_REGION }}
  GCP_ZONE: ${{ vars.STORYSPARK_GCP_ZONE }}
  GCP_TF_STATE_BUCKET: ${{ vars.STORYSPARK_GCP_TF_STATE_BUCKET }}

  # --- GitHub Secret (used via 'secrets.') ---
  # This variable holds the JSON content of the service account key for GCP
  GCP_TERRAFORM_SA_KEY_JSON: ${{ secrets.STORYSPARK_GCP_TERRAFORM_SA_KEY }}

jobs:
  terraform-plan: # This job will run on PRs and main branch pushes to generate the plan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read # Need read permission for checkout
      
    steps:
    # 1. Checkout the code
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Authenticate to GCP using the Service Account Key Secret
    - id: 'auth'
      name: 'Authenticate to Google Cloud via SA Key'
      uses: 'google-github-actions/auth@v2'
      with:
        # Pass the secret key content directly to the action
        credentials_json: ${{ env.STORYSPARK_GCP_TERRAFORM_SA_KEY }}

    # 3. Set up Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.4.6

    # 4. Calculate the State Prefix based on the branch name
    - name: Calculate State Prefix
      id: prefix
      run: |
        # Get the branch name (e.g., 'main' or 'feature/new-api')
        BRANCH_NAME=$(echo ${{ github.ref_name }} | tr '/' '-') 
        
        # Use 'main/infra' for the main branch, otherwise use the branch name.
        if [ "$BRANCH_NAME" == "main" ]; then
          echo "tf_prefix=terraform/main/infra" >> $GITHUB_OUTPUT
        else
          echo "tf_prefix=terraform/$BRANCH_NAME/infra" >> $GITHUB_OUTPUT
        fi
      shell: bash
    
    # 5. Terraform Init - Configure GCS backend
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TF_GOOGLE_DIR }}
      run: |
        # Initialize Terraform and configure the GCS backend for state locking and persistence
        terraform init \
          -backend-config="bucket=${{ env.STORYSPARK_GCP_TF_STATE_BUCKET }}" \
          -backend-config="prefix=${{ steps.prefix.outputs.tf_prefix }}"

    # 6. Terraform Plan & Save Artifact
    - name: Terraform Plan and Save
      id: plan
      working-directory: ${{ env.TF_GOOGLE_DIR }}
      run: |
        # Generate the plan and save it to a file (tfplan) for the next job
        terraform plan -out=tfplan \
          -var="project_id=${{ env.STORYSPARK_GCP_PROJECT_ID }}" \
          -var="region=${{ env.STORYSPARK_GCP_REGION }}" \
          -var="zone=${{ env.STORYSPARK_GCP_ZONE }}"
    
    # 7. Upload the generated plan file for the next job (Apply)
    - name: Upload Terraform Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-artifact
        path: ${{ env.TF_GOOGLE_DIR }}/tfplan

  terraform-apply: # New job: Runs only on push to 'main' and requires 'plan' to succeed
    runs-on: ubuntu-latest
    
    # 1. Dependency: This job runs only after the 'plan' job successfully completes.
    needs: [terraform-plan]
    
    # 2. Condition: This job must only run the 'main' branch.
    if: github.ref == 'refs/heads/main' 
    
    permissions:
      contents: read # Need read permission for artifact download
      
    steps:
    # 1. Checkout the code (Needed for environment consistency/context, though plan artifact has the changes)
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # 2. Authenticate to GCP using the Service Account Key Secret
    - id: 'auth'
      name: 'Authenticate to Google Cloud via SA Key'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ env.STORYSPARK_GCP_TERRAFORM_SA_KEY }}

    # 3. Set up Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.4.6
        
    # 4. Download the generated plan file
    - name: Download Terraform Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan-artifact
        
    # 5. Calculate the State Prefix based on the branch name
    - name: Calculate State Prefix
      id: prefix
      run: |
        # Get the branch name (e.g., 'main' or 'feature/new-api')
        BRANCH_NAME=$(echo ${{ github.ref_name }} | tr '/' '-') 
        
        # Use 'main/infra' for the main branch, otherwise use the branch name.
        if [ "$BRANCH_NAME" == "main" ]; then
          echo "tf_prefix=terraform/main/infra" >> $GITHUB_OUTPUT
        else
          echo "tf_prefix=terraform/$BRANCH_NAME/infra" >> $GITHUB_OUTPUT
        fi
      shell: bash
    
    # 6. Terraform Init (required before apply to ensure backend configuration)
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TF_GOOGLE_DIR }}
      run: |
        # Re-initialize to configure the GCS backend (state is needed for apply)
        terraform init \
          -backend-config="bucket=${{ env.STORYSPARK_GCP_TF_STATE_BUCKET }}" \
          -backend-config="prefix=${{ steps.prefix.outputs.tf_prefix }}"
          
    # 7. Terraform Apply the saved plan
    - name: Terraform Apply
      working-directory: ${{ env.TF_GOOGLE_DIR }}
      run: |
        # Execute the apply using the downloaded plan file
        terraform apply -auto-approve tfplan

