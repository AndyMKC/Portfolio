name: Build push image and deploy

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (optional)'
        required: false
        default: ''

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

env:
  ACR_NAME: storysparkacr
  ACR_LOGIN_SERVER: storysparkacr.azurecr.io
  KEEP: 2
  IMAGE_REPO: storyspark
  TF_DIR: case_studies/StorySpark/src/infra/azure

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

        # This is fetching from Github Action secrets.  The Service Principal this maps to is "github-actions-sp-storyspark" with applicationId of eb6672c3-c9cb-4bff-8bfc-3ad50520949d.  To generate a new set of credentials, use:
        # az ad sp create-for-rbac --name "github-actions-sp-storyspark" --role "Contributor" --scopes "/subscriptions/5ab40d90-e237-422e-a575-b5b73033077c" --sdk-auth
      - name: Azure Login (service principal, from AZURE_CREDENTIALS)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Export ARM environment variables for Terraform
      #   run: |
      #     echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
      #     echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
      #     echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
      #     echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

###############################
      - name: Export ARM_* from AZURE_CREDENTIALS
        shell: bash
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          clientId=$(jq -r '.clientId // .client_id // empty' <<<"$AZURE_CREDENTIALS")
          clientSecret=$(jq -r '.clientSecret // .client_secret // empty' <<<"$AZURE_CREDENTIALS")
          tenantId=$(jq -r '.tenantId // .tenant_id // empty' <<<"$AZURE_CREDENTIALS")
          subscriptionId=$(jq -r '.subscriptionId // .subscription_id // empty' <<<"$AZURE_CREDENTIALS")
          if [ -z "$clientId" ] || [ -z "$clientSecret" ] || [ -z "$tenantId" ] || [ -z "$subscriptionId" ]; then
            echo "Missing required fields in AZURE_CREDENTIALS"
            exit 1
          fi
          echo "ARM_CLIENT_ID=$clientId" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$clientSecret" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$tenantId" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$subscriptionId" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform init
        working-directory: ${{ env.TF_DIR }}
        # env:
        #   ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        #   ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        #   ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        #   ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform init -input=false
##############################

      - name: Log in to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=sha-${GITHUB_SHA::7}" >> "$GITHUB_ENV"

      - name: Set IMAGE_FULL and save to file
        run: |
          set -euo pipefail
          echo "IMAGE_FULL=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPO }}:${IMAGE_TAG}" >> "$GITHUB_ENV"
          echo "image_full=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPO }}:${IMAGE_TAG}" > image_full.txt

      - name: Build and push image
        run: |
          set -euo pipefail
          docker build -t ${ACR_LOGIN_SERVER}/${IMAGE_REPO}:${IMAGE_TAG} -f ./case_studies/StorySpark/src/docker/Dockerfile ./case_studies/StorySpark/src/docker
          docker push ${ACR_LOGIN_SERVER}/${IMAGE_REPO}:${IMAGE_TAG}

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.5.0

      # - name: Terraform init
      #   working-directory: ${{ env.TF_DIR }}
      #   env:
      #     ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #     ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      #     ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #   run: terraform init -input=false

      - name: Terraform plan
        working-directory: ${{ env.TF_DIR }}
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          set -euo pipefail
          terraform plan -input=false -var="acr_name=${{ env.ACR_NAME }}" -var="image_tag=${IMAGE_TAG}" -out=tfplan

      - name: Terraform apply (only on deploy branch)
        if: github.ref == 'refs/heads/deploy'
        working-directory: ${{ env.TF_DIR }}
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          set -euo pipefail
          terraform apply -input=false -auto-approve tfplan

      - name: Prune old images keep latest N (dry-run then delete)
        run: |
          set -euo pipefail
          ACR=${{ env.ACR_NAME }}
          REPO=${{ env.IMAGE_REPO }}
          KEEP=${{ env.KEEP }}
          # list tags newest-first
          tags=$(az acr repository show-tags --name "$ACR" --repository "$REPO" --orderby time_desc -o tsv)
          count=0
          echo "Dry-run: tags that would be deleted (keeping latest $KEEP):"
          for tag in $tags; do
            count=$((count+1))
            if [ $count -le $KEEP ]; then
              echo "Keeping $REPO:$tag"
              continue
            fi
            echo "Would delete $REPO:$tag"
          done

      - name: Prune old images keep latest N (delete step)
        if: github.ref == 'refs/heads/deploy'
        run: |
          set -euo pipefail
          ACR=${{ env.ACR_NAME }}
          REPO=${{ env.IMAGE_REPO }}
          KEEP=${{ env.KEEP }}
          tags=$(az acr repository show-tags --name "$ACR" --repository "$REPO" --orderby time_desc -o tsv)
          count=0
          for tag in $tags; do
            count=$((count+1))
            if [ $count -le $KEEP ]; then
              echo "Keeping $REPO:$tag"
              continue
            fi
            echo "Deleting $REPO:$tag"
            az acr repository delete --name "$ACR" --image "$REPO:$tag" --yes || echo "Failed to delete $REPO:$tag, continuing"
          done